using UnityEngine;
using System;
using DISUnity.DataType;
using DISUnity.Attributes;
using DISUnity.Resources;
using DISUnity.DataType.Enums;
using System.IO;
using System.Text;

namespace DISUnity.PDU.Warfare
{
    /// <summary>
    /// Warfare PDU family header.
    /// </summary>
    /// <DIS_Version>5</DIS_Version>
    /// <size>36 bytes</size>
    [Serializable]
    public class WarfareHeader : Header
    {
        #region Properties

        #region Private

        [Tooltip( Tooltips.FiringID )]
        [SerializeField]
        private EntityIdentifier firingEntityID = new EntityIdentifier();

        [Tooltip( Tooltips.TargetID )]
        [SerializeField]
        private EntityIdentifier targetEntityID = new EntityIdentifier();

        [Tooltip( Tooltips.MuntionID )]
        [SerializeField]
        private EntityIdentifier munitionID = new EntityIdentifier();

        [Tooltip( Tooltips.EventID )]
        [SerializeField]
        private EntityIdentifier eventID = new EntityIdentifier();

        #endregion Private

        /// <summary>
        /// Total size of PDU in bytes.
        /// </summary>        
        public override int Length
        {
            get
            {                
                return 36;
            }
        }

        /// <summary>
        /// The ID of the entity firing.
        /// </summary>
        public EntityIdentifier FiringEntityID
        {
            get
            {
                return firingEntityID;
            }
            set
            {
                isDirty = true;
                firingEntityID = value;
            }
        }

        /// <summary>
        /// The ID of the entity being targeted.
        /// </summary>
        public EntityIdentifier TargetEntityID
        {
            get
            {
                return targetEntityID;
            }
            set
            {
                isDirty = true;
                targetEntityID = value;
            }
        }

        /// <summary>
        /// The ID of the fired munition or expendable. 
        /// </summary>
        public EntityIdentifier MunitionID
        {
            get
            {
                return munitionID;
            }
            set
            {
                isDirty = true;
                munitionID = value;
            }
        }

        /// <summary>
        /// Contains an identification generated by the firing entity to associate related firing and detonation events.
        /// </summary>
        public EntityIdentifier EventID
        {
            get
            {
                return eventID;
            }
            set
            {
                isDirty = true;
                eventID = value;
            }
        }

        #endregion Properties

        public WarfareHeader()
        {
            protocolVersion = ProtocolVersion.IEEE_1278_1_1995; // Min version required to support this PDU            
            protocolFamily = ProtocolFamily.Warfare;
        }

        /// <summary>
        /// Creates a new instance from a binary stream only decoding the body.
        /// </summary>
        /// <param name="h"></param>
        /// <param name="br"></param>
        public WarfareHeader( Header h, BinaryReader br )
        {
            Decode( h, br );
        }

        /// <summary>
        /// Decode network data.
        /// </summary>
        /// <param name="h"></param>
        /// <param name="br"></param>
        public virtual void Decode( Header h, BinaryReader br )
        {
            // Copy header values.
            Clone( h );

            firingEntityID.Decode( br );
            targetEntityID.Decode( br );
            munitionID.Decode( br );
            eventID.Decode( br );
        }

        /// <summary>
        /// Encode data for network transmission.
        /// </summary>
        /// <param name="bw"></param>
        public override void Encode( BinaryWriter bw )
        {
            base.Encode( bw ); // Header

            firingEntityID.Encode( bw );
            targetEntityID.Encode( bw );
            munitionID.Encode( bw );
            eventID.Encode( bw );            
        }

        /// <summary>
        /// Returns a string representation.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append( base.ToString() );

            sb.Append( "Firing Identifier: " + firingEntityID.ToString() );
            sb.Append( "Target Identifier: " + targetEntityID.ToString() );
            sb.Append( "Munition Identifier: " + munitionID.ToString() );
            sb.Append( "Event Identifier: " + eventID.ToString() );

            return sb.ToString();
        }

        #region Operators

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="b"></param>        
        /// <returns></returns>
        public bool Equals( WarfareHeader b )
        {
            if( !Header.Equals( this, b )                  ) return false;
            if( !firingEntityID.Equals( b.firingEntityID ) ) return false;
            if( !targetEntityID.Equals( b.targetEntityID ) ) return false;
            if( !munitionID.Equals( b.munitionID )         ) return false;
            if( !eventID.Equals( b.eventID )               ) return false;
            return true;
        }

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool Equals( WarfareHeader a, WarfareHeader b )
        {
            return a.Equals( b );
        }

        #endregion Operators
    }
}