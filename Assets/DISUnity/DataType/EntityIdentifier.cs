using System;
using System.IO;
using System.Runtime.InteropServices;
using DISUnity.DataType.Enums;
using UnityEngine;
using DISUnity.DataType;
using System.Text;
using DISUnity.Resources;

namespace DISUnity.DataType
{
    /// <summary>
    /// Unique designation of each entity in an event or exercise.
    /// </summary>
    /// <size>6 bytes</size>
    [Serializable]
    public class EntityIdentifier : SimulationAddress
    {
        #region Properties

        #region Private

        [SerializeField]
        [Range( ushort.MinValue, ushort.MaxValue )]
        [Tooltip( Tooltips.EntityID ) ]
        private int entityID;

        #endregion Private

        /// <summary>
        /// Size of this data type in bytes
        /// </summary>
        /// <returns></returns>
        public override int Length
        {
            get
            {
                return 6;
            }
        }    

        /// <summary>
        /// Entity ID
        /// </summary>
        public ushort Entity
        {
            get
            {
                return ( ushort )entityID;
            }
            set
            {
                isDirty = true;
                entityID = value;
            }
        }

        /// <summary>
        /// Generated by bit shifting the site, application and entity id into a single long value.
        /// </summary>
        public long HashCode
        {
            get
            {
                return Site | ( long )Application << 16 | ( long )entityID << 32;
            }            
        }        

        #endregion Properties

        public EntityIdentifier()
        {
        }

        public EntityIdentifier( ushort site, ushort application, ushort entity ) :
            base( site, application )
        {
            entityID = entity;
        }

        /// <summary>
        /// Create a new instance from binary data.
        /// </summary>
        /// <param name="br"></param>
        public EntityIdentifier( BinaryReader br )
        {            
            Decode( br );            
        }

        #region DataTypeBase

        /// <summary>
        /// Decode network data.
        /// </summary>
        /// <param name="br"></param>
        public override void Decode( BinaryReader br )
        {
            base.Decode( br );
            entityID = br.ReadUInt16();
        }

        /// <summary>
        /// Encode data for network transmission.
        /// </summary>
        /// <param name="bw"></param>
        public override void Encode( BinaryWriter bw )
        {
            base.Encode( bw );
            bw.Write( ( ushort )entityID );
        }

        /// <summary>
        /// Returns a string representation.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.Format( "{0} : {1} : {2}\n", Site, Application, entityID );          
        }

        #endregion DataTypeBase

        #region Operators

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="b"></param>
        /// <returns></returns>
        public bool Equals( EntityIdentifier b )
        {
            if( !base.Equals( b )      ) return false;
            if( entityID != b.entityID ) return false;            
            return true;
        }

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool Equals( EntityIdentifier a, EntityIdentifier b )
        {
            return a.Equals( b );
        }

        #endregion Operators
    }
}