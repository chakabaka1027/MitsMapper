using System;
using System.IO;
using System.Runtime.InteropServices;
using DISUnity.DataType.Enums;
using UnityEngine;
using DISUnity.DataType;
using System.Text;

namespace DISUnity.DataType
{  
    /// <summary>
    /// The type of entity 
    /// </summary>
    /// <size>8 bytes</size>
    [Serializable]
    public class EntityType : DataTypeBaseSimple
    {
        #region Properties

        #region Private

        [SerializeField]
        private byte kind;

        [SerializeField]
        private byte domain;

        [SerializeField]
        private int country;

        [SerializeField]
        private byte category;

        [SerializeField]
        private byte subCategory;

        [SerializeField]
        private byte specific;

        [SerializeField]
        private byte extra;
      
        #endregion Private

        /// <summary>
        /// Size of this data type in bytes
        /// </summary>
        /// <returns></returns>
        public override int Length
        {
            get
            {
                return 8;
            }
        }    

        /// <summary>
        /// The kind of entity.
        /// </summary>
        public EntityKind Kind
        {
            get
            {
                return ( EntityKind )kind;
            }
            set
            {
                isDirty = true;
                kind = ( byte )value;
            }
        }

        /// <summary>
        /// The domain in which the entity operates (e.g., subsurface, surface, and land) except for
        /// munition entities. For munition entities this field shall specify the domain of the
        /// target (for example, the munition might be a surface-to-air, so the domain would be anti-air).        
        /// </summary>
        public EntityDomain Domain
        {
            get
            {
                return ( EntityDomain )domain;
            }
            set
            {
                isDirty = true;
                domain = ( byte )value;
            }
        }

        /// <summary>
        /// Country to which the design of the entity or its design specification is attributed.
        /// </summary>
        public Country Country
        {
            get
            {
                return ( Country )country;
            }
            set
            {
                isDirty = true;
                country = ( ushort )value;
            }
        }

        /// <summary>
        /// Main category that describes the entity.
        /// </summary>
        public byte Category
        {
            get
            {
                return category;
            }
            set
            {
                isDirty = true;
                category = value;
            }
        }

        /// <summary>
        /// A particular subcategory to which an entity belongs based on the Category field.
        /// </summary>
        public byte SubCategory
        {
            get
            {
                return subCategory;
            }
            set
            {
                isDirty = true;
                subCategory = value;
            }
        }

        /// <summary>
        /// Specific information about an entity based on the Subcategory field.
        /// </summary>
        public byte Specific
        {
            get
            {
                return specific;
            }
            set
            {
                isDirty = true;
                specific = value;
            }
        }

        /// <summary>
        /// Extra information required to describe a particular entity. 
        /// The contents of this field depend on the type of entity represented.
        /// </summary>
        public byte Extra
        {
            get
            {
                return extra;
            }
            set
            {
                isDirty = true;
                extra = value;
            }
        }    

        /// <summary>
        /// Generated by bit shifting all fields into a single unsigned long value.
        /// </summary>
        public ulong HashCode
        {
            get
            {
                return ( ulong )Kind << 56 | ( ulong )Domain << 48 | ( ulong )Country << 32 | ( ulong )Category << 24 | ( ulong )SubCategory << 16 | ( ulong )Specific << 8 | ( ulong )Extra;
            }            
        } 

        #endregion Properties

        public EntityType()
        {
        }

        /// <summary>
        /// Create a new entity type.
        /// </summary>
        /// <param name="kin">Kind</param>
        /// <param name="dom">Domain</param>
        /// <param name="coun">Country</param>
        /// <param name="cat">Main category that describes the entity.</param>
        /// <param name="subCat">Sub category to which an entity belongs based on the Category field.</param>
        /// <param name="spec">Specific information about an entity based on the Subcategory field.</param>
        /// <param name="ext">Extra information required to describe a particular entity</param>
        public EntityType( EntityKind kin, EntityDomain dom, Country coun, byte cat, byte subCat, byte spec, byte ext )
        {
            kind = ( byte )kin;
            domain = ( byte )dom;
            country = ( ushort )coun;
            category = cat;
            subCategory = subCat;
            specific = spec;
            extra = ext;
        }

        /// <summary>
        /// Ctor
        /// </summary>
        /// <param name="kin">Kind</param>
        /// <param name="dom">Domain</param>
        /// <param name="coun">Country</param>
        /// <param name="cat">Main category that describes the entity.</param>
        /// <param name="subCat">Sub category to which an entity belongs based on the Category field.</param>
        /// <param name="spec">Specific information about an entity based on the Subcategory field.</param>
        /// <param name="ext">Extra information required to describe a particular entity</param>
        public EntityType( byte kin, byte dom, ushort coun, byte cat, byte subCat, byte spec, byte ext )
        {
            kind = kin;
            domain = dom;
            country = coun;
            category = cat;
            subCategory = subCat;
            specific = spec;
            extra = ext;
        }

        /// <summary>
        /// Create a new instance from binary data.
        /// </summary>
        /// <param name="br"></param>
        public EntityType( BinaryReader br )
        {
            Decode( br );
        }

        #region DataTypeBase

        /// <summary>
        /// Decode network data.
        /// </summary>
        /// <param name="br"></param>
        public override void Decode( BinaryReader br )
        {
            isDirty = true;
            kind = br.ReadByte();
            domain = br.ReadByte();
            country = br.ReadUInt16();
            category = br.ReadByte();
            subCategory = br.ReadByte();
            specific = br.ReadByte();
            extra = br.ReadByte();
        }

        /// <summary>
        /// Encode data for network transmission.
        /// </summary>
        /// <param name="bw"></param>
        public override void Encode( BinaryWriter bw )
        {
            bw.Write( kind );
            bw.Write( domain );
            bw.Write( ( ushort )country );
            bw.Write( category );
            bw.Write( subCategory );
            bw.Write( specific );
            bw.Write( extra );
            isDirty = false;
        }

        /// <summary>
        /// Returns a string representation.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.Format( "{0} : {1}-{2}-{3}-{4}-{5}-{6}-{7}\n", "Entity Type", kind, domain, country, category, subCategory, specific, extra );
        }

        #endregion DataTypeBase

        #region Operators

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>        
        /// <param name="b"></param>
        /// <returns></returns>
        public bool Equals( EntityType b )
        {
            if( kind        != b.kind        ) return false;
            if( domain      != b.domain      ) return false;
            if( country     != b.country     ) return false;
            if( category    != b.category    ) return false;
            if( subCategory != b.subCategory ) return false;
            if( specific    != b.specific    ) return false;
            if( extra       != b.extra       ) return false;
            return true;
        }

        /// <summary>
        /// Compares internal data for equality.
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool Equals( EntityType a, EntityType b )
        {
            return a.Equals( b );
        }

        #endregion Operators
    }
}